#!/bin/bash
# author: keith w. thompson
#
# install script for dotfiles
#set -x

function usage {
	printf "usage: install [options] [os] [shell] [vim]\n"
	printf "\n"
	printf "parameters:\n"
	printf "\n"
	printf "  os values         install platform specific files\n"
	printf "      osx              apple mac os/x\n"
	printf "      linux            linux\n"
	printf "      cygwin           windows cygwin\n"
	printf "\n"
	printf "  shell values      install shell specific files\n"
	printf "      bash             bash shell (default)\n"
	printf "      zsh              z shell\n"
	printf "      all              all shells\n"
	printf "\n"
	printf "  vim               install vim files\n"
	printf "\n"
	printf "options:\n"
	printf "\n"
	printf "  -f                force install (will overwrite existing files)\n"
	printf "  -h                display usage information\n"
	printf "  -q                quiet output\n"
	printf "  -v                verbose output\n"
}

# parse options
force=""
quiet=""
verbose=""
while getopts fhqv OPTION
do
	case $OPTION in
		f)  force=true
			;;
		h)  usage
			exit 2
			;;
		q)  quiet=true
			;;
		v)  verbose=true
			;;
		\?) printf "unknown option: -%s\n" $OPTARG
			usage
			exit 2
			;;
	esac
done
shift $(($OPTIND - 1))

# parse parameters
os=""
shell="bash"
vimrc=""
while [ "$1" ]
do
	case $1 in
		osx|linux|cygwin)
			os="$1"
			;;
		bash|zsh|all)
			shell="$1"
			;;
		vim)
			vimrc=true
			;;
		*)
			printf "unknown parameter: %s\n" $1
			usage
			exit 2
			;;
	esac
	shift 1
done

function link_file {
	local target="${HOME}/dotfiles/$1"
	local link="${HOME}/.$1"
	local write=""
	if [ -z "$force" ] && [ -e $link ] ; then
		printf "file already exists: %s\n" $link
		printf "overwrite existing file? [y/n] "
		local answer
		read answer
		([ "$answer" = "y" ] || [ "$answer" = "Y" ]) && write=true
		printf "\n"
	else
		write=true
	fi

	if [ -n "$write" ] ; then
		ln -snf $target $link
		[ -n "$verbose" ] && printf "system link: %s --> %s\n" $link $target
	fi
}

function copy_file {
	local src="${HOME}/dotfiles/skel/$1"
	local dest="${HOME}/.$1"
	local write=""
	if [ ! -n "$force" ] && [ -e $dest ] ; then
		printf "file already exists: %s\n" $dest
		printf "overwrite existing file? [y/n] "
		local answer
		read answer
		([ "$answer" = "y" ] || [ "$answer" = "Y" ]) && write=true
		printf "\n"
	else
		write=true
	fi

	if [ -n "$write" ] ; then
		# remove existing file before link, incase exiting file is a link
		[ -e $dest ] && rm $dest
		cp -f $src $dest
		[ -n "$verbose" ] && printf "file copy: %s <-- %s\n" $dest $src
	fi
}

# bash shell files
if [ "$shell" = "bash" ] || [ "$shell" = "all" ] ; then
	[ -n "$verbose" ] && printf "installing files for shell: bash\n"
	link_file "bash_profile"
	copy_file "bashrc"
	copy_file "bash_login"
fi

# z shell files
if [ "$shell" = "zsh" ] || [ "$shell" = "all" ] ; then
	[ -n "$verbose" ] && printf "installing files for shell: zsh\n"
	link_file "zprofile"
	copy_file "zshrc"
	copy_file "zlogin"
fi

# create .local shell plugins directory
[ ! -d "${HOME}/.local" ] && mkdir "${HOME}/.local"
[ ! -d "${HOME}/.local/shell" ] && mkdir "${HOME}/.local/shell"
[ ! -d "${HOME}/.local/shell/plugins" ] && mkdir "${HOME}/.local/shell/plugins"
#copy_file "example.plugin.sh"
cp -f "./skel/example.plugin.sh" "${HOME}/.local/shell/plugins/"

# os files
if [ -n "$os" ] ; then
	[ -n "$verbose" ] && printf "installing files for os: %s\n" $os
fi

# vim files
if [ -n "$vimrc" ] ; then
	copy_file "vimrc"
	copy_file "gvimrc"
	link_file "vim"

	# create .local vim directories
	[ ! -d "${HOME}/.local/share/vim/backup" ] && mkdir -p "${HOME}/.local/share/vim/backup"
	[ ! -d "${HOME}/.local/share/vim/swap" ] && mkdir -p "${HOME}/.local/share/vim/swap"
	[ ! -d "${HOME}/.local/share/vim/undo" ] && mkdir -p "${HOME}/.local/share/vim/undo"
fi

# always link these files
link_file "gitignore"

[ -z "$quiet" ] && printf "dotfiles installled"

